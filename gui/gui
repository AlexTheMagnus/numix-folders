#!/usr/bin/python3

from gi.repository import Gtk, Gdk, GdkPixbuf, Pango
from re import search
from sys import argv
from os import path


def get_default_colour(colour):
    for d in defaults:
        if colour == defaults[d]:
            return d
        else:
            continue
    return "custom"


def gdk_to_hex(gdk_colour):
    colours = gdk_colour.to_floats()
    return "#" + "".join(["%02x" % (colour * 255) for colour in colours])


def check_hex(colour):
    return search(r'#[a-fA-F0-9]{6}$', colour)


style_fixed = {
    "1": (False, False, False),
    "2": (False, False, False),
    "3": (False, False, False),
    "4": (False, False, False),
    "5": (False, False, True),
    "6": (False, False, False)
}

defaults = {
    "blue": ("#42a5f5", "#1976d2", "#2a74b9"),
    "brown": ("#8d6e63", "#5d4037", "#634b43"),
    "green": ("#66bb6a", "#388e3c", "#448647"),
    "grey": ("#bdbdbd", "#757575", "#7f7f7f"),
    "orange": ("#f57c00", "#e65100", "#ab5d0b"),
    "pink": ("#f06292", "#ec407a", "#c64077"),
    "purple": ("#7e57c2", "#512da8", "#54398d"),
    "red": ("#ef5350", "#d32f2f", "#ab3634"),
    "yellow": ("#ffca28", "#ffb300", "#c79a18"),
    "style 1": ("#c4905e", "#b07f51", "#f9f9f9"),
    "style 2": ("#e8b07f", "#9e7757", "#9e7757"),
    "style 3": ("#f2bb64", "#ea9036", "#b58c4b"),
    "style 4": ("#f5c14e", "#e9a439", "#c79d41"),
    "style 5": ("#ffb300", "#f57c00", "#fff8e1"),
    "style 6": ("#ffa726", "#ef6c00", "#b17621")
}

colours = ("Default", "Blue", "Brown", "Green", "Grey", "Orange",
           "Pink", "Purple", "Red", "Yellow", "Style 1", "Style 2",
           "Style 3", "Style 4", "Style 5", "Style 6", "Custom")

number_styles = 6
number_colours = 3
default_style = 6

if len(argv) > 1:
    style = argv[1]
else:
    style = str(default_style)

try:
    if int(style) not in range(1, int(style)+1):
        style = str(default_style)
except:
    style = str(default_style)

if len(argv) > 2:
    colour = argv[2].lower()
else:
    colour = "default"

if colour == "custom":
    colour_list = []
    for i in range(number_colours):
        colour_list.append(argv[i+3] if len(argv) > i+3 and check_hex(argv[i+3]) else "#000000")
elif colour == "default":
    colour_list = defaults["style %s" % (style)]
else:
    try:
        colour_list = defaults[colour]
    except:
        colour = "default"
        colour_list = defaults["style %s" % (style)]


class NumixFoldersGUI(Gtk.Window):

    def __init__(self, style, colour, colour_list):
        self.colour = colour_list
        self.global_colour = colour
        self.style = style

        win = Gtk.Window.__init__(self, title="Numix folders GUI")
        self.set_icon_name('numix-folders')
        self.set_border_width(20)

        # boxes
        vboxmain = Gtk.VBox(spacing=20)
        hboxmain = Gtk.HBox(spacing=0)
        vboxleft = Gtk.VBox()
        hboxpics = []
        vboxright = Gtk.VBox(homogeneous=False)
        hboxcombo = Gtk.HBox()
        hboxcolour = []  # filled later
        hboxbuttons = Gtk.HBox()
        self.add(vboxmain)

        # pixmaps
        self.image = []
        self.svgs = []
        for i in range(number_styles):
            hboxpics.append(Gtk.HBox())
            with open(path.split(path.abspath(__file__))[0]+"/../styles/"+str(i+1)+"/Numix/48x48/places/custom-user-home.svg", "r") as svgfile:
                self.svgs.append(svgfile.read())
            self.image.append(Gtk.Image())
            self.image[i].show()
            fixed = Gtk.Fixed()
            fixed.put(self.image[i], 0, 0)
            hboxpics[i].pack_start(fixed, False, False, 15)

        # radiobuttons
        self.radiobuttons = []
        for i in range(number_styles):
            if i == 0:
                self.radiobuttons.append(Gtk.RadioButton("Style %s" % (i+1)))
            else:
                self.radiobuttons.append(Gtk.RadioButton(group=self.radiobuttons[0]))
                self.radiobuttons[i].set_label("Style %s" % (i+1))
            hboxpics[i].pack_start(self.radiobuttons[i], False, False, 0)
        self.radiobuttons[int(style)-1].set_active(True)

        # comboboxentry
        colours_store = Gtk.ListStore(str)
        for col in colours:
            colours_store.append([col])
        self.colours_combo = Gtk.ComboBox.new_with_model(colours_store)
        renderer_text = Gtk.CellRendererText()
        self.colours_combo.pack_start(renderer_text, True)
        self.colours_combo.add_attribute(renderer_text, "text", 0)
        if colour and colour in [x.lower() for x in colours]:
            ind = [x.lower() for x in colours].index(colour)
            self.colours_combo.set_active(ind)
        hboxcombo.pack_start(self.colours_combo, False, False, 10)

        # colourchooser widgets
        self.colourbuttons = []
        self.colourentries = []
        for i in range(number_colours):
            self.colourbuttons.append(Gtk.ColorButton())
            self.colourbuttons[i].set_color(Gdk.color_parse(self.colour[i]))
            self.colourentries.append(Gtk.Entry())
            self.colourentries[i].set_text(self.colour[i])
            self.colourentries[i].set_max_width_chars(7)
            self.colourentries[i].set_max_length(7)
            self.colourentries[i].modify_font(Pango.FontDescription('monospace'))
            hboxcolour.append(Gtk.HBox())
            hboxcolour[i].pack_start(self.colourbuttons[i], False, False, 10)
            hboxcolour[i].pack_start(self.colourentries[i], False, False, 0)

        # buttons
        buttonclose = Gtk.Button("_Cancel", use_underline=True)
        buttonok = Gtk.Button("_Apply", use_underline=True)
        hboxbuttons.pack_end(buttonok, False, False, 5)
        hboxbuttons.pack_end(buttonclose, False, False, 0)

        # packing
        vboxmain.pack_start(hboxmain, False, False, 0)
        vboxmain.pack_end(hboxbuttons, True, True, 4)

        hboxmain.pack_start(vboxleft, False, False, 0)
        hboxmain.pack_start(vboxright, False, False, 25)

        for hbox in hboxpics:
            vboxleft.pack_start(hbox, True, True, 3)

        for hbox in hboxcolour[::-1]:
            vboxright.pack_end(hbox, False, False, 5)
        vboxright.pack_end(hboxcombo, False, False, 20)

        # connect signals
        self.colours_combo.connect("changed", self.combo_changed)
        for j, but in enumerate(self.colourbuttons):
            but.connect("color_set", self.colourbutton_changed, j)
        for j, ent in enumerate(self.colourentries):
            ent.connect("changed", self.entry_changed, j)
        for j, rad in enumerate(self.radiobuttons):
            rad.connect("toggled", self.radio_toggled, j)
        # colour 2 & 3 do not exist for style1
        self.radiobuttons[0].connect("toggled", self.set_radio_sensitive, 1, 2)
        buttonclose.connect("clicked", Gtk.main_quit)
        buttonok.connect("clicked", self.on_ok_clicked)

        # a little bit of initializing
        self.combo_changed(self.colours_combo)
        self.radio_toggled(self.radiobuttons[int(self.style)-1], int(self.style)-1)
        # needed if default colour is style because that's nothing else than "custom"
        if colour == "custom":
            colour = get_default_colour(tuple(self.colour))
            ind = [x.lower() for x in colours].index(colour)
            self.update_images(list(range(1, number_styles+1)), self.colour)
            self.colours_combo.handler_block_by_func(self.combo_changed)
            self.colours_combo.set_active(ind)
            self.colours_combo.handler_unblock_by_func(self.combo_changed)

    def radio_toggled(self, widget, arg):
        if widget.get_active():
            self.style = arg+1
        else:
            return
        if self.global_colour == "default":
            self.colour = list(defaults["style %s" % (self.style)])
            for j, but in enumerate(self.colourbuttons):
                but.handler_block_by_func(self.colourbutton_changed)
                but.set_color(Gdk.color_parse(self.colour[j]))
                but.handler_unblock_by_func(self.colourbutton_changed)
            for j, ent in enumerate(self.colourentries):
                ent.handler_block_by_func(self.entry_changed)
                ent.set_text(self.colour[j])
                ent.handler_unblock_by_func(self.entry_changed)
        elif not (self.global_colour.startswith("style") or self.global_colour == "custom"):
                for j in range(number_colours):
                    if style_fixed[str(self.style)][j]:
                        self.colour[j] = defaults["style %s" % (self.style)][j]
                        self.colourentries[j].handler_block_by_func(self.entry_changed)
                        self.colourentries[j].set_text(self.colour[j])
                        self.colourentries[j].handler_unblock_by_func(self.entry_changed)
                        self.colourbuttons[j].handler_block_by_func(self.colourbutton_changed)
                        self.colourbuttons[j].set_color(Gdk.color_parse(self.colour[j]))
                        self.colourbuttons[j].handler_unblock_by_func(self.colourbutton_changed)
                    else:
                        cols = defaults[self.global_colour]
                        self.colour[j] = cols[j]
                        self.colourentries[j].handler_block_by_func(self.entry_changed)
                        self.colourentries[j].set_text(self.colour[j])
                        self.colourentries[j].handler_unblock_by_func(self.entry_changed)
                        self.colourbuttons[j].handler_block_by_func(self.colourbutton_changed)
                        self.colourbuttons[j].set_color(Gdk.color_parse(self.colour[j]))
                        self.colourbuttons[j].handler_unblock_by_func(self.colourbutton_changed)

    def set_radio_sensitive(self, widget, *args):
        if not hasattr(args, '__contains__'):
            args = [args]
        for i in args:
            if widget.get_active():
                self.colourbuttons[i].set_sensitive(False)
                self.colourentries[i].set_sensitive(False)
            else:
                self.colourbuttons[i].set_sensitive(True)
                self.colourentries[i].set_sensitive(True)

    def combo_changed(self, widget):
        ind = widget.get_active()
        colour = colours[ind].lower()
        self.global_colour = colour
        if colour == "custom":
            return
        elif colour == "default":
            self.colour = list(defaults["style %s" % (self.style)])
            for j in range(1, number_styles+1):
                self.update_images(j, defaults["style "+str(j)])
        elif not colour.startswith("style"):
            self.colour = list(defaults[colour])
            col = self.colour[:]
            for i in range(1, number_styles+1):
                for j in range(number_colours):
                    if style_fixed[str(i)][j]:
                        col[j] = defaults["style %s" % (i)][j]
                    else:
                        col[j] = self.colour[j]
                self.update_images(i, col)
            for j in range(number_colours):
                if style_fixed[str(self.style)][j]:
                    self.colour[j] = defaults["style %s" % (self.style)][j]
        else:
            self.colour = list(defaults[colour])
            self.update_images(list(range(1, number_styles+1)), self.colour)
        for j, but in enumerate(self.colourbuttons):
            but.handler_block_by_func(self.colourbutton_changed)
            but.set_color(Gdk.color_parse(self.colour[j]))
            but.handler_unblock_by_func(self.colourbutton_changed)
        for j, ent in enumerate(self.colourentries):
            ent.handler_block_by_func(self.entry_changed)
            ent.set_text(self.colour[j])
            ent.handler_unblock_by_func(self.entry_changed)

    def colourbutton_changed(self, widget, arg):
        colour = widget.get_color()
        self.colour[arg] = gdk_to_hex(colour)
        self.colourentries[arg].handler_block_by_func(self.entry_changed)
        self.colourentries[arg].set_text(self.colour[arg])
        self.colourentries[arg].handler_unblock_by_func(self.entry_changed)
        colour = get_default_colour(tuple(self.colour))
        self.global_colour = colour
        if not colour.startswith('style'):
            colour = "custom"
        ind = [x.lower() for x in colours].index(colour)
        self.update_images(list(range(1, number_styles+1)), self.colour)
        self.colours_combo.handler_block_by_func(self.combo_changed)
        self.colours_combo.set_active(ind)
        self.colours_combo.handler_unblock_by_func(self.combo_changed)

    def entry_changed(self, widget, arg):
        entry = widget.get_text()
        match = check_hex(entry)
        if not match:
            return
        try:
            colour = Gdk.color_parse(entry)
        except:
            return
        self.colour[arg] = entry
        self.colourbuttons[arg].handler_block_by_func(self.colourbutton_changed)
        self.colourbuttons[arg].set_color(colour)
        self.colourbuttons[arg].handler_unblock_by_func(self.colourbutton_changed)

        colour = get_default_colour(tuple(self.colour))
        self.global_colour = colour
        if not colour.startswith('style'):
            colour = "custom"
        ind = [x.lower() for x in colours].index(colour)
        self.update_images(list(range(1, number_styles+1)), self.colour)
        self.colours_combo.handler_block_by_func(self.combo_changed)
        self.colours_combo.set_active(ind)
        self.colours_combo.handler_unblock_by_func(self.combo_changed)

    def update_images(self, style, colours):
        if not hasattr(style, '__contains__'):
            style = [style]  # check if iterable
        if not hasattr(colours, '__contains__'):
            colours = [colours]
        for i in style:
            svg = self.svgs[i-1].replace("replacecolour1", colours[0])
            for k, col in enumerate(colours):
                if k != 0:
                    svg = svg.replace("replacecolour%s" % (k+1), col)
            loader = GdkPixbuf.PixbufLoader()
            loader.write(svg.encode())
            loader.close()
            pixbuf = loader.get_pixbuf()
            self.image[int(i)-1].set_from_pixbuf(pixbuf)

    def on_ok_clicked(self, button):
        colour = self.global_colour
        if colour.startswith("style"):
            colour = "custom"
        print(self.style)
        print(colour)
        for i in range(number_colours):
            print(self.colour[i].replace("#", ""))
        Gtk.main_quit()


win = NumixFoldersGUI(style, colour, colour_list)
win.connect("delete-event", Gtk.main_quit)
win.set_resizable(False)
win.show_all()
Gtk.main()
