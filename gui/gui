#!/usr/bin/python3

from gi.repository import Gtk, Gdk
from shutil import copy
import sys, re

def get_default_colour(colour):
    for d in defaults:
        if colour == defaults[d]:
            return d
        else:
            continue
    return "custom"

def gdk_to_hex(gdk_colour):
    colours = gdk_colour.to_floats()
    return "#" + "".join(["%02x" % (colour * 255) for colour in colours])

def check_hex(colour):
    match = re.search(r'^#(?:[0-9a-fA-F]{3}){1,2}$', colour)
    if match:
        return True
    else:
        return False

defaults = {"blue": ("#42a5f5", "#1976d2", "#2a74b9"), "brown": ("#8d6e63", "#5d4037", "#634b43"), "green": ("#66bb6a", "#388e3c", "#448647"),
         "grey": ("#bdbdbd", "#757575", "#7f7f7f"), "orange": ("#f57c00", "#e65100", "#ab5d0b"), "pink": ("#f06292", "#ec407a", "#c64077"),
         "purple": ("#7e57c2", "#512da8", "#54398d"), "red": ("#ef5350", "#d32f2f", "#ab3634"), "yellow": ("#ffca28", "#ffb300", "#c79a18"),
         "style 1": ("#c4905e", "#b07f51", "#f9f9f9"), "style 2": ("#e8b07f", "#9e7757", "#9e7757"), "style 3": ("#f2bb64", "#ea9036", "#b58c4b"),
         "style 4": ("#f5c14e", "#e9a439", "#c79d41"), "style 5": ("#ffb300", "#f57c00", "#fff8e1"), "style 6": ("#ffa726", "#ef6c00", "#b17621")
        }

colours = ("Default", "Blue", "Brown", "Green", "Grey", "Orange", "Pink", "Purple","Red", "Yellow", "Style 1", "Style 2", "Style 3",
            "Style 4", "Style 5", "Style 6", "Custom")

number_styles = 6
number_colours = 3
default_style = 6

if len(sys.argv) > 1:
    style=sys.argv[1]
else:
    style=str(default_style)

try:
    if int(style) not in range(1,style+1):
        style = str(default_style)
except:
    style = str(default_style)

if len(sys.argv) > 2:
    colour=sys.argv[2].lower()
else:
    colour = "default"

if colour == "custom":
    colour1 = sys.argv[3] if len(sys.argv) > 3 and check_hex(sys.argv[3]) else "#000000"  
    colour2 = sys.argv[4] if len(sys.argv) > 4 and check_hex(sys.argv[4]) else "#000000"
    colour3 = sys.argv[5] if len(sys.argv) > 5 and check_hex(sys.argv[5]) else "#000000"
elif colour == "default":
    col = defaults["style %s"%(default_style)]
    colour1 = col[0]
    colour2 = col[1]
    colour3 = col[2]
else:
    try:
        col = defaults[colour]
        colour1 = col[0]
        colour2 = col[1]
        colour3 = col[2]
    except:
        colour = "default"
        col = defaults["style %s"%(default_style)]
        colour1 = col[0]
        colour2 = col[1]
        colour3 = col[2]



class NumixFoldersGUI(Gtk.Window):

    def __init__(self, style, colour, colour1, colour2, colour3):
        self.quit = 1
        self.colour = [colour1, colour2, colour3]
        
        win = Gtk.Window.__init__(self, title="Numix folders GUI")
        self.set_border_width(20)


        #boxes
        vboxmain = Gtk.VBox(spacing=20)
        hboxmain = Gtk.HBox(spacing=0)
        hboxleft = Gtk.HBox()
        vboxpics = Gtk.VBox(homogeneous=True)
        vboxradio = Gtk.VBox(spacing=12, homogeneous=True)
        vboxright = Gtk.VBox(homogeneous=False)
        hboxcombo = Gtk.HBox()
        hboxcolour = [] #filled later
        hboxbuttons = Gtk.HBox()
        self.add(vboxmain)
        
        
        #pixmaps
        self.image = []
        for i in range(number_styles):
            self.image.append(Gtk.Image())
            self.image[i].set_from_file("./user-home_style%s.svg"%(i+1))
            self.image[i].show()
            fixed = Gtk.Fixed()
            fixed.put(self.image[i], 0, 0)
            vboxpics.pack_start(fixed, True, True, 0)
            
        
        #radiobuttons
        self.radiobuttons = []
        for i in range(number_styles):
            if i==0:
                self.radiobuttons.append(Gtk.RadioButton("Style %s"%(i+1)))
            else:
                self.radiobuttons.append(Gtk.RadioButton(group=self.radiobuttons[0]))
                self.radiobuttons[i].set_label("Style %s"%(i+1))
            vboxradio.pack_start(self.radiobuttons[i], False, False, 0)
        self.radiobuttons[int(style)-1].set_active(True)
        
        
        #comboboxentry
        colours_store = Gtk.ListStore(str)
        for col in colours:
            colours_store.append([col])
        self.colours_combo = Gtk.ComboBox.new_with_model(colours_store)
        renderer_text = Gtk.CellRendererText()
        self.colours_combo.pack_start(renderer_text, True)
        self.colours_combo.add_attribute(renderer_text, "text", 0)
        if colour and colour in [x.lower() for x in colours]: 
            ind = [x.lower() for x in colours].index(colour)
            self.colours_combo.set_active(ind)
        hboxcombo.pack_start(self.colours_combo, True, True, 30)
        
        
        #colourchooser widgets
        self.colourbuttons = []
        self.colourentries = []
        for i in range(number_colours):
            self.colourbuttons.append(Gtk.ColorButton())
            self.colourbuttons[i].set_color(Gdk.color_parse(self.colour[i]))
            self.colourentries.append(Gtk.Entry())
            self.colourentries[i].set_text(colour1)
            self.colourentries[i].set_max_width_chars(7)
            self.colourentries[i].set_max_length(7)
            hboxcolour.append(Gtk.HBox())
            hboxcolour[i].pack_start(self.colourbuttons[i], False, False, 10)
            hboxcolour[i].pack_start(self.colourentries[i], False, False, 0)
        
        
        #buttons
        buttonclose = Gtk.Button("_Cancel", use_underline=True)
        buttonok = Gtk.Button("_OK", use_underline=True)
        hboxbuttons.pack_end(buttonok, False, False, 5)
        hboxbuttons.pack_end(buttonclose, False, False, 0)
        
        
        #packing
        vboxmain.pack_start(hboxmain, False, False, 0)
        vboxmain.pack_end(hboxbuttons, True, True, 4)
        
        hboxmain.pack_start(hboxleft, False, False, 0)
        hboxmain.pack_start(vboxright, False, False, 25)
        
        hboxleft.pack_start(vboxpics, True, True, 5)
        hboxleft.pack_end(vboxradio, True, True, 5)
        
        vboxright.pack_start(hboxcombo, False, False, 70)
        for hbox in hboxcolour:
            vboxright.pack_start(hbox, False, False, 5)
        
        
        #conect signals
        self.colours_combo.connect("changed", self.update_combo)
        for j, but in enumerate(self.colourbuttons):
            but.connect("color_set", self.update_entry, j)
        for j, ent in enumerate(self.colourentries):
            ent.connect("changed", self.update_colourbutton, j)
        self.radiobuttons[0].connect("toggled", self.update_style, 1, 2) #colour 2 & 3 do not exist for style1
        buttonclose.connect("clicked", self.on_close_clicked)
        buttonok.connect("clicked", self.on_ok_clicked)
        
        
        #a little bit of initializing
        self.update_combo(self.colours_combo)
        if colour == "custom":
            self.update_images(list(range(1, number_styles+1)), *self.colour)
        
        
    def update_style(self, widget, *args):
        if not hasattr(args, '__contains__'): args = [args]
        for i in args:
            if widget.get_active():
                self.colourbuttons[i].set_sensitive(False)
                self.colourentries[i].set_sensitive(False)
            else:
                self.colourbuttons[i].set_sensitive(True)
                self.colourentries[i].set_sensitive(True)


    def update_combo(self, widget):
        ind = widget.get_active()
        colour = colours[ind].lower()
        if colour == "custom":
            return
        elif colour == "default":
            self.colour = list(defaults["style 6"])
            for j in range(1, number_styles+1):
                self.update_images(j, *defaults["style "+str(j)])
        else:
            self.colour = list(defaults[colour])
            self.update_images(list(range(1, number_styles+1)), *self.colour)
        for j, but in enumerate(self.colourbuttons): 
            but.handler_block_by_func(self.update_entry)
            but.set_color(Gdk.color_parse(self.colour[j]))
            but.handler_unblock_by_func(self.update_entry)
        for j, ent in enumerate(self.colourentries): 
            ent.handler_block_by_func(self.update_colourbutton)
            ent.set_text(self.colour[j])
            ent.handler_unblock_by_func(self.update_colourbutton)

        
    def update_entry(self, widget, arg):
        colour = widget.get_color()
        self.colour[arg] = gdk_to_hex(colour)
        self.colourentries[arg].handler_block_by_func(self.update_colourbutton)
        self.colourentries[arg].set_text(self.colour[arg])
        self.colourentries[arg].handler_unblock_by_func(self.update_colourbutton)
        colour = get_default_colour(tuple(self.colour))
        ind = [x.lower() for x in colours].index(colour)
        self.update_images(list(range(1, number_styles+1)), *self.colour)
        self.colours_combo.handler_block_by_func(self.update_combo)
        self.colours_combo.set_active(ind)
        self.colours_combo.handler_unblock_by_func(self.update_combo)
        

    def update_colourbutton(self, widget, arg):
        entry = widget.get_text()
        if len(entry) != 7:
            return
        match = re.search(r'^#(?:[0-9a-fA-F]{3}){1,2}$', entry)
        if not match:
            return
        try:
            colour = Gdk.color_parse(entry)
        except:
            return
        self.colour[arg] = entry
        self.colourbuttons[arg].handler_block_by_func(self.update_entry)
        self.colourbuttons[arg].set_color(colour)
        self.colourbuttons[arg].handler_unblock_by_func(self.update_entry)
        
        colour = get_default_colour(tuple(self.colour))
        ind = [x.lower() for x in colours].index(colour)
        self.update_images(list(range(1, number_styles+1)), *self.colour)
        self.colours_combo.handler_block_by_func(self.update_combo)
        self.colours_combo.set_active(ind)
        self.colours_combo.handler_unblock_by_func(self.update_combo)


    def update_images(self, style, col1, col2, col3):
        if not hasattr(style, '__contains__'): style = [style] #check if iterable
        for i in style:
            filename = "./user-home_style"+str(i)+".svg"
            copy("./styles/"+str(i)+"/Numix/48x48/places/custom-user-home.svg", filename)
            with open(filename, "r") as content_file:
                svg = content_file.read()
            svg = svg.replace("replacecolour1", col1)
            svg = svg.replace("replacecolour2", col2)
            svg = svg.replace("replacecolour3", col3)
            f = open(filename,'w')
            f.write(svg)
            f.close()
            self.image[int(i)-1].set_from_file(filename)
    

    def on_close_clicked(self, button):
        self.quit = 1
        Gtk.main_quit()
    
    
    def on_ok_clicked(self, button):
        self.quit = 0
        Gtk.main_quit()


win = NumixFoldersGUI(style, colour, colour1, colour2, colour3)
win.connect("delete-event", Gtk.main_quit)
win.set_resizable(False)
win.show_all()
Gtk.main()

try:
    style = [win.radiobuttons[0].get_group()[::-1].index(r)+1 for r in win.radiobuttons[0].get_group() if r.get_active()][0]
    colour = colours[win.colours_combo.get_active()].lower()
except:
    sys.exit("Cancel")
if not win.quit:
    print(style)
    print(colour)
    print(win.colour[0])
    print(win.colour[1])
    print(win.colour[2])
else:
    sys.exit("Cancel")


